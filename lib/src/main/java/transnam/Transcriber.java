/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package transnam;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public class Transcriber {

    public String getEnglishFirstname(String firstnamePersian) throws IOException, URISyntaxException {
        touchDictionary();
        PersianWord queryWord = new PersianWord(firstnamePersian);

        String firstnameEnglish = firstnamePerEng.get(queryWord);

        // If English transcribe is found
        if (firstnameEnglish != null) {
            return firstnameEnglish;
        }

        // If English transcribe is not found, check the lastnames.
        firstnameEnglish = lastnamePerEng.get(queryWord);
        if (firstnameEnglish != null) {
            return firstnameEnglish;
        }

        // Split the name based on whitespace, transcribe each part.
        firstnamePersian = firstnamePersian.replace(" ", PersianWord.ZERO_WIDTH_JOIN);
        String [] subnames = firstnamePersian.split(PersianWord.ZERO_WIDTH_JOIN);
        
        if(subnames.length == 0) {
            return null;
        }

        firstnameEnglish = "";
        for(String subname : subnames){
            String subnameEnglish = firstnamePerEng.get(new PersianWord(subname));
            if(subnameEnglish == null){
                return null;
            }
            firstnameEnglish += PersianWord.ZERO_WIDTH_JOIN + subnameEnglish;
        }
        return firstnameEnglish;
    }

    public String getPersianFirstname(String firstnameEnglish) throws IOException, URISyntaxException {
        touchDictionary();
        return firstnameEngPer.get(firstnameEnglish).getWord();
    }

    public String getEnglishSurname(String surnamePersian) throws IOException, URISyntaxException {
        touchDictionary();
        PersianWord queryWord = new PersianWord(surnamePersian);

        String lastnameEnglish = lastnamePerEng.get(queryWord);

        // If English transcribe is found
        if (lastnameEnglish != null) {
            return lastnameEnglish;
        }

        // If English transcribe is not found, check the firstnames.
        lastnameEnglish = firstnamePerEng.get(queryWord);
        if (lastnameEnglish != null) {
            return lastnameEnglish;
        }

        // Split the name based on whitespace, transcribe each part.
        surnamePersian = surnamePersian.replace(" ", PersianWord.ZERO_WIDTH_JOIN);
        String [] subnames = surnamePersian.split(PersianWord.ZERO_WIDTH_JOIN);
        
        if(subnames.length == 0) {
            return null;
        }

        lastnameEnglish = "";
        for(String subname : subnames){
            String subnameEnglish = lastnamePerEng.get(new PersianWord(subname));
            if(subnameEnglish == null){
                return null;
            }
            lastnameEnglish += PersianWord.ZERO_WIDTH_JOIN + subnameEnglish;
        }
        return lastnameEnglish;
    }
    public String getPersianSurname(String surnameEnglish) throws IOException, URISyntaxException {
        touchDictionary();
        return lastnameEngPer.get(surnameEnglish).getWord();
    }

    private Map<String, PersianWord> firstnameEngPer;
    private Map<PersianWord, String> firstnamePerEng;
    private Map<String, PersianWord> lastnameEngPer;
    private Map<PersianWord, String> lastnamePerEng;

    // If the Transcriber has not loaded the dictionaries into the memory, then
    // Transcriber is not ready.
    private boolean ready = false;

    private void touchDictionary() throws IOException, URISyntaxException {
        if (ready) {
            return;
        }
        loadFirstnames();
        loadLastnames();
        ready = true;
    }

    private void loadFirstnames() throws IOException, URISyntaxException {
        String fileName = "firstname.csv";
        URL resource = getClass().getClassLoader().getResource(fileName);
        if (resource == null) {
            throw new IllegalArgumentException(fileName + " not found!");
        }
        File firstnameFile = new File(resource.toURI());
        FileReader reader = new FileReader(firstnameFile);
        BufferedReader buffedReader = new BufferedReader(reader);
        String line = buffedReader.readLine();
        firstnameEngPer = new HashMap<>();
        firstnamePerEng = new HashMap<>();
        while (line != null) {
            String[] pair = line.split(",");
            if (pair.length != 2) {
                throw new IllegalArgumentException("Unexpected line: `" + line + "`");
            }
            firstnameEngPer.put(pair[1], new PersianWord(pair[0]));
            firstnamePerEng.put(new PersianWord(pair[0]), pair[1]);

            // read next line
            line = buffedReader.readLine();
        }
        reader.close();
    }

    private void loadLastnames() throws IOException, URISyntaxException {
        String fileName = "lastname.csv";
        URL resource = getClass().getClassLoader().getResource(fileName);
        if (resource == null) {
            throw new IllegalArgumentException(fileName + " not found!");
        }
        File lastnameFile = new File(resource.toURI());
        FileReader reader = new FileReader(lastnameFile);
        BufferedReader buffedReader = new BufferedReader(reader);
        String line = buffedReader.readLine();
        lastnameEngPer = new HashMap<>();
        lastnamePerEng = new HashMap<>();
        while (line != null) {
            String[] pair = line.split(",");
            if (pair.length != 2) {
                throw new IllegalArgumentException("Unexpected line: `" + line + "`");
            }
            lastnameEngPer.put(pair[1], new PersianWord(pair[0]));
            lastnamePerEng.put(new PersianWord(pair[0]), pair[1]);

            // read next line
            line = buffedReader.readLine();
        }
        buffedReader.close();
        reader.close();
    }
}
